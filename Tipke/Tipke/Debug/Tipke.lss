
Tipke.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  000003c8  0000045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800130  00800130  0000048c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b96  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a7  00000000  00000000  0000110a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000552  00000000  00000000  000018b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00001e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000462  00000000  00000000  00001f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000387  00000000  00000000  000023ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002735  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ec       	ldi	r30, 0xC8	; 200
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e3       	ldi	r26, 0x30	; 48
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 33       	cpi	r26, 0x33	; 51
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 36 01 	call	0x26c	; 0x26c <main>
  9e:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:

uint8_t i2c_read_ack(void) {
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
	while (!(TWCR & (1 << TWINT)));
	return TWDR;
}
  a6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  aa:	88 e4       	ldi	r24, 0x48	; 72
  ac:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  b0:	08 95       	ret

000000b2 <i2c_start>:
  b2:	84 ea       	ldi	r24, 0xA4	; 164
  b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  bc:	88 23       	and	r24, r24
  be:	e4 f7       	brge	.-8      	; 0xb8 <i2c_start+0x6>
  c0:	08 95       	ret

000000c2 <i2c_stop>:
  c2:	84 e9       	ldi	r24, 0x94	; 148
  c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  cc:	84 fd       	sbrc	r24, 4
  ce:	fc cf       	rjmp	.-8      	; 0xc8 <i2c_stop+0x6>
  d0:	08 95       	ret

000000d2 <i2c_write>:
  d2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  d6:	84 e8       	ldi	r24, 0x84	; 132
  d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  dc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  e0:	88 23       	and	r24, r24
  e2:	e4 f7       	brge	.-8      	; 0xdc <i2c_write+0xa>
  e4:	08 95       	ret

000000e6 <i2c_read_nack>:

uint8_t i2c_read_nack(void) {
	TWCR = (1 << TWINT) | (1 << TWEN);
  e6:	84 e8       	ldi	r24, 0x84	; 132
  e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
  ec:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f0:	88 23       	and	r24, r24
  f2:	e4 f7       	brge	.-8      	; 0xec <i2c_read_nack+0x6>
	return TWDR;
  f4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
  f8:	08 95       	ret

000000fa <dac_output>:
	415, 440, 466, 494, 523, 554, 587, 622,   // G#4 - D#5
	659, 698, 740, 784, 831, 880, 932, 988    // E5 - B5
};

// Funkcija za slanje DAC vrijednosti (0-4095)
void dac_output(uint16_t value) {
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	ec 01       	movw	r28, r24
	i2c_start();
 100:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start>
	i2c_write((MCP4725_ADDR << 1) | 0);
 104:	82 ec       	ldi	r24, 0xC2	; 194
 106:	0e 94 69 00 	call	0xd2	; 0xd2 <i2c_write>
	i2c_write(0x40); // Fast mode
 10a:	80 e4       	ldi	r24, 0x40	; 64
 10c:	0e 94 69 00 	call	0xd2	; 0xd2 <i2c_write>
	i2c_write(value >> 4);
 110:	ce 01       	movw	r24, r28
 112:	92 95       	swap	r25
 114:	82 95       	swap	r24
 116:	8f 70       	andi	r24, 0x0F	; 15
 118:	89 27       	eor	r24, r25
 11a:	9f 70       	andi	r25, 0x0F	; 15
 11c:	89 27       	eor	r24, r25
 11e:	0e 94 69 00 	call	0xd2	; 0xd2 <i2c_write>
	i2c_write((value & 0x0F) << 4);
 122:	8c 2f       	mov	r24, r28
 124:	82 95       	swap	r24
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	0e 94 69 00 	call	0xd2	; 0xd2 <i2c_write>
	i2c_stop();
 12c:	0e 94 61 00 	call	0xc2	; 0xc2 <i2c_stop>
}
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <__vector_11>:

// Timer1 ISR: toggla square wave na DAC
ISR(TIMER1_COMPA_vect) {
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	2f 93       	push	r18
 142:	3f 93       	push	r19
 144:	4f 93       	push	r20
 146:	5f 93       	push	r21
 148:	6f 93       	push	r22
 14a:	7f 93       	push	r23
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
	static uint8_t state = 0;
	if (state) {
 158:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 15c:	88 23       	and	r24, r24
 15e:	29 f0       	breq	.+10     	; 0x16a <__vector_11+0x34>
		dac_output(4095);
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	9f e0       	ldi	r25, 0x0F	; 15
 164:	0e 94 7d 00 	call	0xfa	; 0xfa <dac_output>
 168:	04 c0       	rjmp	.+8      	; 0x172 <__vector_11+0x3c>
		} else {
		dac_output(0);
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 7d 00 	call	0xfa	; 0xfa <dac_output>
	}
	state = !state;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <__data_end>
 178:	91 11       	cpse	r25, r1
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
}
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	7f 91       	pop	r23
 18e:	6f 91       	pop	r22
 190:	5f 91       	pop	r21
 192:	4f 91       	pop	r20
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <set_frequency>:

// Postavi Timer1 za zadanu frekvenciju
void set_frequency(uint16_t freq) {
	if (freq == 0) {
 1a2:	00 97       	sbiw	r24, 0x00	; 0
 1a4:	39 f4       	brne	.+14     	; 0x1b4 <set_frequency+0x12>
		TCCR1B = 0; // zaustavi timer
 1a6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		dac_output(0);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 7d 00 	call	0xfa	; 0xfa <dac_output>
		return;
 1b2:	08 95       	ret
	}

	uint32_t ocr = (F_CPU / (2UL * freq)) - 1;
 1b4:	a0 e0       	ldi	r26, 0x00	; 0
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	9c 01       	movw	r18, r24
 1ba:	ad 01       	movw	r20, r26
 1bc:	22 0f       	add	r18, r18
 1be:	33 1f       	adc	r19, r19
 1c0:	44 1f       	adc	r20, r20
 1c2:	55 1f       	adc	r21, r21
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	74 e2       	ldi	r23, 0x24	; 36
 1c8:	84 ef       	ldi	r24, 0xF4	; 244
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 c0 01 	call	0x380	; 0x380 <__udivmodsi4>
 1d0:	da 01       	movw	r26, r20
 1d2:	c9 01       	movw	r24, r18
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	a1 09       	sbc	r26, r1
 1d8:	b1 09       	sbc	r27, r1
	cli();
 1da:	f8 94       	cli
	OCR1A = (uint16_t)ocr;
 1dc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1e0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCNT1 = 0;
 1e4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 1e8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1B = (1 << WGM12) | (1 << CS10); // CTC, no prescaler
 1ec:	89 e0       	ldi	r24, 0x09	; 9
 1ee:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	sei();
 1f2:	78 94       	sei
 1f4:	08 95       	ret

000001f6 <mcp23008_init>:
}

// Inicijaliziraj MCP23008 na zadanoj adresi
void mcp23008_init(uint8_t addr) {
 1f6:	cf 93       	push	r28
 1f8:	c8 2f       	mov	r28, r24
	i2c_start();
 1fa:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start>
	i2c_write((addr << 1) | 0);
 1fe:	cc 0f       	add	r28, r28
 200:	8c 2f       	mov	r24, r28
 202:	0e 94 69 00 	call	0xd2	; 0xd2 <i2c_write>
	i2c_write(0x00); // IODIR
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 69 00 	call	0xd2	; 0xd2 <i2c_write>
	i2c_write(0xFF); // svi ulazi
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	0e 94 69 00 	call	0xd2	; 0xd2 <i2c_write>
	i2c_stop();
 212:	0e 94 61 00 	call	0xc2	; 0xc2 <i2c_stop>

	i2c_start();
 216:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start>
	i2c_write((addr << 1) | 0);
 21a:	8c 2f       	mov	r24, r28
 21c:	0e 94 69 00 	call	0xd2	; 0xd2 <i2c_write>
	i2c_write(0x06); // GPPU
 220:	86 e0       	ldi	r24, 0x06	; 6
 222:	0e 94 69 00 	call	0xd2	; 0xd2 <i2c_write>
	i2c_write(0xFF); // pull-up enable
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	0e 94 69 00 	call	0xd2	; 0xd2 <i2c_write>
	i2c_stop();
 22c:	0e 94 61 00 	call	0xc2	; 0xc2 <i2c_stop>
}
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <mcp23008_read>:

// ?itaj GPIO s MCP23008
uint8_t mcp23008_read(uint8_t addr) {
 234:	cf 93       	push	r28
 236:	c8 2f       	mov	r28, r24
	uint8_t data;

	i2c_start();
 238:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start>
	i2c_write((addr << 1) | 0);
 23c:	8c 2f       	mov	r24, r28
 23e:	88 0f       	add	r24, r24
 240:	0e 94 69 00 	call	0xd2	; 0xd2 <i2c_write>
	i2c_write(0x09); // GPIO
 244:	89 e0       	ldi	r24, 0x09	; 9
 246:	0e 94 69 00 	call	0xd2	; 0xd2 <i2c_write>
	i2c_start();
 24a:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start>
	i2c_write((addr << 1) | 1);
 24e:	8c 2f       	mov	r24, r28
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	81 60       	ori	r24, 0x01	; 1
 258:	0e 94 69 00 	call	0xd2	; 0xd2 <i2c_write>
	data = i2c_read_nack();
 25c:	0e 94 73 00 	call	0xe6	; 0xe6 <i2c_read_nack>
 260:	c8 2f       	mov	r28, r24
	i2c_stop();
 262:	0e 94 61 00 	call	0xc2	; 0xc2 <i2c_stop>

	return data;
}
 266:	8c 2f       	mov	r24, r28
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <main>:

int main(void) {
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	00 d0       	rcall	.+0      	; 0x272 <main+0x6>
 272:	00 d0       	rcall	.+0      	; 0x274 <main+0x8>
 274:	00 d0       	rcall	.+0      	; 0x276 <main+0xa>
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
	i2c_init();
 27a:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>

	// Init MCP23008 ekspandere
	for (uint8_t i = 0; i < 3; i++) {
 27e:	10 e0       	ldi	r17, 0x00	; 0
 280:	05 c0       	rjmp	.+10     	; 0x28c <main+0x20>
		mcp23008_init(MCP23008_BASE_ADDR + i);
 282:	81 e2       	ldi	r24, 0x21	; 33
 284:	81 0f       	add	r24, r17
 286:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <mcp23008_init>

int main(void) {
	i2c_init();

	// Init MCP23008 ekspandere
	for (uint8_t i = 0; i < 3; i++) {
 28a:	1f 5f       	subi	r17, 0xFF	; 255
 28c:	13 30       	cpi	r17, 0x03	; 3
 28e:	c8 f3       	brcs	.-14     	; 0x282 <main+0x16>
		mcp23008_init(MCP23008_BASE_ADDR + i);
	}

	// Init Timer1
	TCCR1A = 0;
 290:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
 294:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = (1 << OCIE1A);
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>

	sei();
 29e:	78 94       	sei

	uint8_t last_state[3] = {0xFF, 0xFF, 0xFF}; // za debouncing
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	89 83       	std	Y+1, r24	; 0x01
 2a4:	8a 83       	std	Y+2, r24	; 0x02
 2a6:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t stable_state[3] = {0xFF, 0xFF, 0xFF};
 2a8:	8c 83       	std	Y+4, r24	; 0x04
 2aa:	8d 83       	std	Y+5, r24	; 0x05
 2ac:	8e 83       	std	Y+6, r24	; 0x06

	while (1) {
		for (uint8_t exp = 0; exp < 3; exp++) {
 2ae:	f1 2c       	mov	r15, r1
 2b0:	5e c0       	rjmp	.+188    	; 0x36e <main+0x102>
			uint8_t state = mcp23008_read(MCP23008_BASE_ADDR + exp);
 2b2:	0f 2e       	mov	r0, r31
 2b4:	f1 e2       	ldi	r31, 0x21	; 33
 2b6:	ef 2e       	mov	r14, r31
 2b8:	f0 2d       	mov	r31, r0
 2ba:	ef 0c       	add	r14, r15
 2bc:	8e 2d       	mov	r24, r14
 2be:	0e 94 1a 01 	call	0x234	; 0x234 <mcp23008_read>

			// Debounce
			if (state != last_state[exp]) {
 2c2:	0f 2d       	mov	r16, r15
 2c4:	10 e0       	ldi	r17, 0x00	; 0
 2c6:	e1 e0       	ldi	r30, 0x01	; 1
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	ec 0f       	add	r30, r28
 2cc:	fd 1f       	adc	r31, r29
 2ce:	e0 0f       	add	r30, r16
 2d0:	f1 1f       	adc	r31, r17
 2d2:	90 81       	ld	r25, Z
 2d4:	89 17       	cp	r24, r25
 2d6:	81 f0       	breq	.+32     	; 0x2f8 <main+0x8c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d8:	8f e1       	ldi	r24, 0x1F	; 31
 2da:	9e e4       	ldi	r25, 0x4E	; 78
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <main+0x70>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <main+0x76>
 2e2:	00 00       	nop
				_delay_ms(5); // debounce delay
				state = mcp23008_read(MCP23008_BASE_ADDR + exp);
 2e4:	8e 2d       	mov	r24, r14
 2e6:	0e 94 1a 01 	call	0x234	; 0x234 <mcp23008_read>
				last_state[exp] = state;
 2ea:	e1 e0       	ldi	r30, 0x01	; 1
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	ec 0f       	add	r30, r28
 2f0:	fd 1f       	adc	r31, r29
 2f2:	e0 0f       	add	r30, r16
 2f4:	f1 1f       	adc	r31, r17
 2f6:	80 83       	st	Z, r24
			}

			if (state != stable_state[exp]) {
 2f8:	e4 e0       	ldi	r30, 0x04	; 4
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	ec 0f       	add	r30, r28
 2fe:	fd 1f       	adc	r31, r29
 300:	e0 0f       	add	r30, r16
 302:	f1 1f       	adc	r31, r17
 304:	90 81       	ld	r25, Z
 306:	89 17       	cp	r24, r25
 308:	89 f1       	breq	.+98     	; 0x36c <main+0x100>
				stable_state[exp] = state;
 30a:	e4 e0       	ldi	r30, 0x04	; 4
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	ec 0f       	add	r30, r28
 310:	fd 1f       	adc	r31, r29
 312:	e0 0f       	add	r30, r16
 314:	f1 1f       	adc	r31, r17
 316:	80 83       	st	Z, r24

				// Provjeri tipke
				for (uint8_t bit = 0; bit < 8; bit++) {
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	26 c0       	rjmp	.+76     	; 0x368 <main+0xfc>
					if (!(state & (1 << bit))) {
 31c:	e9 2f       	mov	r30, r25
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	28 2f       	mov	r18, r24
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	09 2e       	mov	r0, r25
 326:	02 c0       	rjmp	.+4      	; 0x32c <main+0xc0>
 328:	35 95       	asr	r19
 32a:	27 95       	ror	r18
 32c:	0a 94       	dec	r0
 32e:	e2 f7       	brpl	.-8      	; 0x328 <main+0xbc>
 330:	20 fd       	sbrc	r18, 0
 332:	19 c0       	rjmp	.+50     	; 0x366 <main+0xfa>
						// Tipka pritisnuta
						current_frequency = notes[exp * 8 + bit];
 334:	00 0f       	add	r16, r16
 336:	11 1f       	adc	r17, r17
 338:	00 0f       	add	r16, r16
 33a:	11 1f       	adc	r17, r17
 33c:	00 0f       	add	r16, r16
 33e:	11 1f       	adc	r17, r17
 340:	e0 0f       	add	r30, r16
 342:	f1 1f       	adc	r31, r17
 344:	ee 0f       	add	r30, r30
 346:	ff 1f       	adc	r31, r31
 348:	e0 50       	subi	r30, 0x00	; 0
 34a:	ff 4f       	sbci	r31, 0xFF	; 255
 34c:	80 81       	ld	r24, Z
 34e:	91 81       	ldd	r25, Z+1	; 0x01
 350:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <current_frequency+0x1>
 354:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <current_frequency>
						set_frequency(current_frequency);
 358:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <current_frequency>
 35c:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <current_frequency+0x1>
 360:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <set_frequency>
						goto next_scan;
 364:	a4 cf       	rjmp	.-184    	; 0x2ae <main+0x42>

			if (state != stable_state[exp]) {
				stable_state[exp] = state;

				// Provjeri tipke
				for (uint8_t bit = 0; bit < 8; bit++) {
 366:	9f 5f       	subi	r25, 0xFF	; 255
 368:	98 30       	cpi	r25, 0x08	; 8
 36a:	c0 f2       	brcs	.-80     	; 0x31c <main+0xb0>

	uint8_t last_state[3] = {0xFF, 0xFF, 0xFF}; // za debouncing
	uint8_t stable_state[3] = {0xFF, 0xFF, 0xFF};

	while (1) {
		for (uint8_t exp = 0; exp < 3; exp++) {
 36c:	f3 94       	inc	r15
 36e:	92 e0       	ldi	r25, 0x02	; 2
 370:	9f 15       	cp	r25, r15
 372:	08 f0       	brcs	.+2      	; 0x376 <main+0x10a>
 374:	9e cf       	rjmp	.-196    	; 0x2b2 <main+0x46>
					}
				}
			}
		}
		// Ako nijedna tipka nije pritisnuta
		set_frequency(0);
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <set_frequency>
 37e:	97 cf       	rjmp	.-210    	; 0x2ae <main+0x42>

00000380 <__udivmodsi4>:
 380:	a1 e2       	ldi	r26, 0x21	; 33
 382:	1a 2e       	mov	r1, r26
 384:	aa 1b       	sub	r26, r26
 386:	bb 1b       	sub	r27, r27
 388:	fd 01       	movw	r30, r26
 38a:	0d c0       	rjmp	.+26     	; 0x3a6 <__udivmodsi4_ep>

0000038c <__udivmodsi4_loop>:
 38c:	aa 1f       	adc	r26, r26
 38e:	bb 1f       	adc	r27, r27
 390:	ee 1f       	adc	r30, r30
 392:	ff 1f       	adc	r31, r31
 394:	a2 17       	cp	r26, r18
 396:	b3 07       	cpc	r27, r19
 398:	e4 07       	cpc	r30, r20
 39a:	f5 07       	cpc	r31, r21
 39c:	20 f0       	brcs	.+8      	; 0x3a6 <__udivmodsi4_ep>
 39e:	a2 1b       	sub	r26, r18
 3a0:	b3 0b       	sbc	r27, r19
 3a2:	e4 0b       	sbc	r30, r20
 3a4:	f5 0b       	sbc	r31, r21

000003a6 <__udivmodsi4_ep>:
 3a6:	66 1f       	adc	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	88 1f       	adc	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	1a 94       	dec	r1
 3b0:	69 f7       	brne	.-38     	; 0x38c <__udivmodsi4_loop>
 3b2:	60 95       	com	r22
 3b4:	70 95       	com	r23
 3b6:	80 95       	com	r24
 3b8:	90 95       	com	r25
 3ba:	9b 01       	movw	r18, r22
 3bc:	ac 01       	movw	r20, r24
 3be:	bd 01       	movw	r22, r26
 3c0:	cf 01       	movw	r24, r30
 3c2:	08 95       	ret

000003c4 <_exit>:
 3c4:	f8 94       	cli

000003c6 <__stop_program>:
 3c6:	ff cf       	rjmp	.-2      	; 0x3c6 <__stop_program>
