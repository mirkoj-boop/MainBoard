
Tipke.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  0000028c  00000300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a98  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000077e  00000000  00000000  00000e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000483  00000000  00000000  00001616  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000417  00000000  00000000  00001b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002cb  00000000  00000000  00001f73  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000223e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 c0 00 	call	0x180	; 0x180 <main>
  8e:	0c 94 44 01 	jmp	0x288	; 0x288 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <TWI_init>:
// Ove vrijednosti odgovaraju 12-bit DAC-u s Vref=3.3V i 1V/oct skali
// C3 ? 130.8Hz do B4 ? 493.9Hz

// ====== I2C ======
void TWI_init(void) {
	TWSR = 0x00;            // prescaler 1
  96:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 72;              // SCL ~100kHz @16MHz
  9a:	88 e4       	ldi	r24, 0x48	; 72
  9c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR = (1<<TWEN);
  a0:	84 e0       	ldi	r24, 0x04	; 4
  a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a6:	08 95       	ret

000000a8 <TWI_start>:
}

void TWI_start(void) {
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  a8:	84 ea       	ldi	r24, 0xA4	; 164
  aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));
  ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b2:	88 23       	and	r24, r24
  b4:	e4 f7       	brge	.-8      	; 0xae <TWI_start+0x6>
}
  b6:	08 95       	ret

000000b8 <TWI_stop>:

void TWI_stop(void) {
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
  b8:	84 e9       	ldi	r24, 0x94	; 148
  ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  be:	08 95       	ret

000000c0 <TWI_write>:
}

void TWI_write(uint8_t data) {
	TWDR = data;
  c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT)|(1<<TWEN);
  c4:	84 e8       	ldi	r24, 0x84	; 132
  c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));
  ca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ce:	88 23       	and	r24, r24
  d0:	e4 f7       	brge	.-8      	; 0xca <TWI_write+0xa>
}
  d2:	08 95       	ret

000000d4 <TWI_read_nack>:

uint8_t TWI_read_nack(void) {
	TWCR = (1<<TWINT)|(1<<TWEN);
  d4:	84 e8       	ldi	r24, 0x84	; 132
  d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));
  da:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  de:	88 23       	and	r24, r24
  e0:	e4 f7       	brge	.-8      	; 0xda <TWI_read_nack+0x6>
	return TWDR;
  e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
  e6:	08 95       	ret

000000e8 <MCP23008_init>:

// ====== MCP23008 ======
void MCP23008_init(uint8_t addr) {
  e8:	cf 93       	push	r28
  ea:	c8 2f       	mov	r28, r24
	TWI_start();
  ec:	0e 94 54 00 	call	0xa8	; 0xa8 <TWI_start>
	TWI_write((addr<<1) | 0);
  f0:	8c 2f       	mov	r24, r28
  f2:	88 0f       	add	r24, r24
  f4:	0e 94 60 00 	call	0xc0	; 0xc0 <TWI_write>
	TWI_write(MCP_IODIR);
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 60 00 	call	0xc0	; 0xc0 <TWI_write>
	TWI_write(0xFF);    // svi pinovi kao ulazi
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	0e 94 60 00 	call	0xc0	; 0xc0 <TWI_write>
	TWI_stop();
 104:	0e 94 5c 00 	call	0xb8	; 0xb8 <TWI_stop>
}
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <MCP23008_read>:

uint8_t MCP23008_read(uint8_t addr) {
 10c:	cf 93       	push	r28
 10e:	c8 2f       	mov	r28, r24
	uint8_t val;
	TWI_start();
 110:	0e 94 54 00 	call	0xa8	; 0xa8 <TWI_start>
	TWI_write((addr<<1) | 0);
 114:	8c 2f       	mov	r24, r28
 116:	88 0f       	add	r24, r24
 118:	0e 94 60 00 	call	0xc0	; 0xc0 <TWI_write>
	TWI_write(MCP_GPIO);
 11c:	89 e0       	ldi	r24, 0x09	; 9
 11e:	0e 94 60 00 	call	0xc0	; 0xc0 <TWI_write>
	TWI_start();
 122:	0e 94 54 00 	call	0xa8	; 0xa8 <TWI_start>
	TWI_write((addr<<1) | 1);
 126:	8c 2f       	mov	r24, r28
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	81 60       	ori	r24, 0x01	; 1
 130:	0e 94 60 00 	call	0xc0	; 0xc0 <TWI_write>
	val = TWI_read_nack();
 134:	0e 94 6a 00 	call	0xd4	; 0xd4 <TWI_read_nack>
 138:	c8 2f       	mov	r28, r24
	TWI_stop();
 13a:	0e 94 5c 00 	call	0xb8	; 0xb8 <TWI_stop>
	return val;
}
 13e:	8c 2f       	mov	r24, r28
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <MCP4725_write>:

// ====== MCP4725 DAC ======
void MCP4725_write(uint16_t value) {
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	ec 01       	movw	r28, r24
	TWI_start();
 14a:	0e 94 54 00 	call	0xa8	; 0xa8 <TWI_start>
	TWI_write((DAC_ADDR<<1) | 0);
 14e:	80 ec       	ldi	r24, 0xC0	; 192
 150:	0e 94 60 00 	call	0xc0	; 0xc0 <TWI_write>
	TWI_write(0x40);                // write DAC register
 154:	80 e4       	ldi	r24, 0x40	; 64
 156:	0e 94 60 00 	call	0xc0	; 0xc0 <TWI_write>
	TWI_write(value >> 4);          // MSB
 15a:	ce 01       	movw	r24, r28
 15c:	92 95       	swap	r25
 15e:	82 95       	swap	r24
 160:	8f 70       	andi	r24, 0x0F	; 15
 162:	89 27       	eor	r24, r25
 164:	9f 70       	andi	r25, 0x0F	; 15
 166:	89 27       	eor	r24, r25
 168:	0e 94 60 00 	call	0xc0	; 0xc0 <TWI_write>
	TWI_write((value & 0x0F)<<4);  // LSB
 16c:	8c 2f       	mov	r24, r28
 16e:	82 95       	swap	r24
 170:	80 7f       	andi	r24, 0xF0	; 240
 172:	0e 94 60 00 	call	0xc0	; 0xc0 <TWI_write>
	TWI_stop();
 176:	0e 94 5c 00 	call	0xb8	; 0xb8 <TWI_stop>
}
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <main>:

// ====== MAIN ======
int main(void) {
	TWI_init();
 180:	0e 94 4b 00 	call	0x96	; 0x96 <TWI_init>
	MCP23008_init(MCP1_ADDR);
 184:	81 e2       	ldi	r24, 0x21	; 33
 186:	0e 94 74 00 	call	0xe8	; 0xe8 <MCP23008_init>
	MCP23008_init(MCP2_ADDR);
 18a:	82 e2       	ldi	r24, 0x22	; 34
 18c:	0e 94 74 00 	call	0xe8	; 0xe8 <MCP23008_init>
	MCP23008_init(MCP3_ADDR);
 190:	83 e2       	ldi	r24, 0x23	; 35
 192:	0e 94 74 00 	call	0xe8	; 0xe8 <MCP23008_init>

	while (1) {
		uint8_t keys[3];
		keys[0] = ~MCP23008_read(MCP1_ADDR);  // invert (aktivno LOW)
 196:	81 e2       	ldi	r24, 0x21	; 33
 198:	0e 94 86 00 	call	0x10c	; 0x10c <MCP23008_read>
 19c:	18 2f       	mov	r17, r24
 19e:	10 95       	com	r17
		keys[1] = ~MCP23008_read(MCP2_ADDR);
 1a0:	82 e2       	ldi	r24, 0x22	; 34
 1a2:	0e 94 86 00 	call	0x10c	; 0x10c <MCP23008_read>
 1a6:	d8 2f       	mov	r29, r24
 1a8:	d0 95       	com	r29
		keys[2] = ~MCP23008_read(MCP3_ADDR);
 1aa:	83 e2       	ldi	r24, 0x23	; 35
 1ac:	0e 94 86 00 	call	0x10c	; 0x10c <MCP23008_read>
 1b0:	c8 2f       	mov	r28, r24
 1b2:	c0 95       	com	r28

		uint8_t found = 0;

		for (uint8_t i = 0; i < 8; i++) {
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	18 c0       	rjmp	.+48     	; 0x1e8 <main+0x68>
			if (keys[0] & (1<<i)) {
 1b8:	48 2f       	mov	r20, r24
 1ba:	50 e0       	ldi	r21, 0x00	; 0
 1bc:	21 2f       	mov	r18, r17
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	08 2e       	mov	r0, r24
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <main+0x48>
 1c4:	35 95       	asr	r19
 1c6:	27 95       	ror	r18
 1c8:	0a 94       	dec	r0
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <main+0x44>
 1cc:	20 ff       	sbrs	r18, 0
 1ce:	0b c0       	rjmp	.+22     	; 0x1e6 <main+0x66>
				MCP4725_write(notes[i]);
 1d0:	44 0f       	add	r20, r20
 1d2:	55 1f       	adc	r21, r21
 1d4:	fa 01       	movw	r30, r20
 1d6:	e0 50       	subi	r30, 0x00	; 0
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	80 81       	ld	r24, Z
 1dc:	91 81       	ldd	r25, Z+1	; 0x01
 1de:	0e 94 a2 00 	call	0x144	; 0x144 <MCP4725_write>
				found = 1;
 1e2:	91 e0       	ldi	r25, 0x01	; 1
				break;
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <main+0x6e>
		keys[1] = ~MCP23008_read(MCP2_ADDR);
		keys[2] = ~MCP23008_read(MCP3_ADDR);

		uint8_t found = 0;

		for (uint8_t i = 0; i < 8; i++) {
 1e6:	8f 5f       	subi	r24, 0xFF	; 255
 1e8:	88 30       	cpi	r24, 0x08	; 8
 1ea:	30 f3       	brcs	.-52     	; 0x1b8 <main+0x38>
		uint8_t keys[3];
		keys[0] = ~MCP23008_read(MCP1_ADDR);  // invert (aktivno LOW)
		keys[1] = ~MCP23008_read(MCP2_ADDR);
		keys[2] = ~MCP23008_read(MCP3_ADDR);

		uint8_t found = 0;
 1ec:	90 e0       	ldi	r25, 0x00	; 0
				MCP4725_write(notes[i]);
				found = 1;
				break;
			}
		}
		if (!found) {
 1ee:	99 23       	and	r25, r25
 1f0:	d9 f0       	breq	.+54     	; 0x228 <main+0xa8>
 1f2:	1d c0       	rjmp	.+58     	; 0x22e <main+0xae>
			for (uint8_t i = 0; i < 8; i++) {
				if (keys[1] & (1<<i)) {
 1f4:	48 2f       	mov	r20, r24
 1f6:	50 e0       	ldi	r21, 0x00	; 0
 1f8:	2d 2f       	mov	r18, r29
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	08 2e       	mov	r0, r24
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <main+0x84>
 200:	35 95       	asr	r19
 202:	27 95       	ror	r18
 204:	0a 94       	dec	r0
 206:	e2 f7       	brpl	.-8      	; 0x200 <main+0x80>
 208:	20 ff       	sbrs	r18, 0
 20a:	0c c0       	rjmp	.+24     	; 0x224 <main+0xa4>
					MCP4725_write(notes[i+8]);
 20c:	fa 01       	movw	r30, r20
 20e:	38 96       	adiw	r30, 0x08	; 8
 210:	ee 0f       	add	r30, r30
 212:	ff 1f       	adc	r31, r31
 214:	e0 50       	subi	r30, 0x00	; 0
 216:	ff 4f       	sbci	r31, 0xFF	; 255
 218:	80 81       	ld	r24, Z
 21a:	91 81       	ldd	r25, Z+1	; 0x01
 21c:	0e 94 a2 00 	call	0x144	; 0x144 <MCP4725_write>
					found = 1;
 220:	91 e0       	ldi	r25, 0x01	; 1
					break;
 222:	05 c0       	rjmp	.+10     	; 0x22e <main+0xae>
				found = 1;
				break;
			}
		}
		if (!found) {
			for (uint8_t i = 0; i < 8; i++) {
 224:	8f 5f       	subi	r24, 0xFF	; 255
 226:	01 c0       	rjmp	.+2      	; 0x22a <main+0xaa>
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	88 30       	cpi	r24, 0x08	; 8
 22c:	18 f3       	brcs	.-58     	; 0x1f4 <main+0x74>
					found = 1;
					break;
				}
			}
		}
		if (!found) {
 22e:	99 23       	and	r25, r25
 230:	d9 f0       	breq	.+54     	; 0x268 <main+0xe8>
 232:	1d c0       	rjmp	.+58     	; 0x26e <main+0xee>
			for (uint8_t i = 0; i < 8; i++) {
				if (keys[2] & (1<<i)) {
 234:	48 2f       	mov	r20, r24
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	2c 2f       	mov	r18, r28
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	08 2e       	mov	r0, r24
 23e:	02 c0       	rjmp	.+4      	; 0x244 <main+0xc4>
 240:	35 95       	asr	r19
 242:	27 95       	ror	r18
 244:	0a 94       	dec	r0
 246:	e2 f7       	brpl	.-8      	; 0x240 <main+0xc0>
 248:	20 ff       	sbrs	r18, 0
 24a:	0c c0       	rjmp	.+24     	; 0x264 <main+0xe4>
					MCP4725_write(notes[i+16]);
 24c:	fa 01       	movw	r30, r20
 24e:	70 96       	adiw	r30, 0x10	; 16
 250:	ee 0f       	add	r30, r30
 252:	ff 1f       	adc	r31, r31
 254:	e0 50       	subi	r30, 0x00	; 0
 256:	ff 4f       	sbci	r31, 0xFF	; 255
 258:	80 81       	ld	r24, Z
 25a:	91 81       	ldd	r25, Z+1	; 0x01
 25c:	0e 94 a2 00 	call	0x144	; 0x144 <MCP4725_write>
					found = 1;
 260:	91 e0       	ldi	r25, 0x01	; 1
					break;
 262:	05 c0       	rjmp	.+10     	; 0x26e <main+0xee>
					break;
				}
			}
		}
		if (!found) {
			for (uint8_t i = 0; i < 8; i++) {
 264:	8f 5f       	subi	r24, 0xFF	; 255
 266:	01 c0       	rjmp	.+2      	; 0x26a <main+0xea>
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	88 30       	cpi	r24, 0x08	; 8
 26c:	18 f3       	brcs	.-58     	; 0x234 <main+0xb4>
					break;
				}
			}
		}

		if (!found) {
 26e:	91 11       	cpse	r25, r1
 270:	04 c0       	rjmp	.+8      	; 0x27a <main+0xfa>
			// nijedna tipka pritisnuta
			MCP4725_write(0);
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 a2 00 	call	0x144	; 0x144 <MCP4725_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27a:	83 ec       	ldi	r24, 0xC3	; 195
 27c:	99 e0       	ldi	r25, 0x09	; 9
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <main+0xfe>
 282:	00 c0       	rjmp	.+0      	; 0x284 <main+0x104>
 284:	00 00       	nop
		}

		_delay_ms(10);
	}
 286:	87 cf       	rjmp	.-242    	; 0x196 <main+0x16>

00000288 <_exit>:
 288:	f8 94       	cli

0000028a <__stop_program>:
 28a:	ff cf       	rjmp	.-2      	; 0x28a <__stop_program>
